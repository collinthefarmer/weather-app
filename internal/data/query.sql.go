// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
	"time"
)

const addGeolocation = `-- name: AddGeolocation :one
INSERT INTO
    geolocations (ip, latitude, longitude, city, country, timezone)
VALUES
    (?, ?, ?, ?, ?, ?)
RETURNING
    ip, latitude, longitude, city, country, timezone
`

type AddGeolocationParams struct {
	Ip        string
	Latitude  float64
	Longitude float64
	City      string
	Country   string
	Timezone  string
}

func (q *Queries) AddGeolocation(ctx context.Context, arg AddGeolocationParams) (Geolocation, error) {
	row := q.db.QueryRowContext(ctx, addGeolocation,
		arg.Ip,
		arg.Latitude,
		arg.Longitude,
		arg.City,
		arg.Country,
		arg.Timezone,
	)
	var i Geolocation
	err := row.Scan(
		&i.Ip,
		&i.Latitude,
		&i.Longitude,
		&i.City,
		&i.Country,
		&i.Timezone,
	)
	return i, err
}

const addObservation = `-- name: AddObservation :one
INSERT INTO
    observations (
        latitude,
        longitude,
        timezone,
        temp_c,
        temp_f,
        relative_humidity,
        rain,
        snowfall,
        weather_code,
        time_utc,
        time_local
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING
    id, latitude, longitude, timezone, temp_c, temp_f, relative_humidity, rain, snowfall, weather_code, time_utc, time_local
`

type AddObservationParams struct {
	Latitude         float64
	Longitude        float64
	Timezone         string
	TempC            float64
	TempF            float64
	RelativeHumidity float64
	Rain             float64
	Snowfall         float64
	WeatherCode      string
	TimeUtc          time.Time
	TimeLocal        time.Time
}

func (q *Queries) AddObservation(ctx context.Context, arg AddObservationParams) (Observation, error) {
	row := q.db.QueryRowContext(ctx, addObservation,
		arg.Latitude,
		arg.Longitude,
		arg.Timezone,
		arg.TempC,
		arg.TempF,
		arg.RelativeHumidity,
		arg.Rain,
		arg.Snowfall,
		arg.WeatherCode,
		arg.TimeUtc,
		arg.TimeLocal,
	)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Timezone,
		&i.TempC,
		&i.TempF,
		&i.RelativeHumidity,
		&i.Rain,
		&i.Snowfall,
		&i.WeatherCode,
		&i.TimeUtc,
		&i.TimeLocal,
	)
	return i, err
}

const addObservationDrawing = `-- name: AddObservationDrawing :exec
INSERT INTO
    observation_drawings (observation_id, data, size_bytes, time_submitted)
VALUES
    (?, ?, ?, ?)
RETURNING
    observation_id, data, size_bytes, time_submitted, foregin
`

type AddObservationDrawingParams struct {
	ObservationID int64
	Data          string
	SizeBytes     int64
	TimeSubmitted time.Time
}

func (q *Queries) AddObservationDrawing(ctx context.Context, arg AddObservationDrawingParams) error {
	_, err := q.db.ExecContext(ctx, addObservationDrawing,
		arg.ObservationID,
		arg.Data,
		arg.SizeBytes,
		arg.TimeSubmitted,
	)
	return err
}

const getGeolocation = `-- name: GetGeolocation :one
SELECT
    ip, latitude, longitude, city, country, timezone
FROM
    geolocations
WHERE
    ip = ?
`

func (q *Queries) GetGeolocation(ctx context.Context, ip string) (Geolocation, error) {
	row := q.db.QueryRowContext(ctx, getGeolocation, ip)
	var i Geolocation
	err := row.Scan(
		&i.Ip,
		&i.Latitude,
		&i.Longitude,
		&i.City,
		&i.Country,
		&i.Timezone,
	)
	return i, err
}

const getObservation = `-- name: GetObservation :one
SELECT
    id, latitude, longitude, timezone, temp_c, temp_f, relative_humidity, rain, snowfall, weather_code, time_utc, time_local
FROM
    observations
WHERE
    id = ?
`

func (q *Queries) GetObservation(ctx context.Context, id int64) (Observation, error) {
	row := q.db.QueryRowContext(ctx, getObservation, id)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Timezone,
		&i.TempC,
		&i.TempF,
		&i.RelativeHumidity,
		&i.Rain,
		&i.Snowfall,
		&i.WeatherCode,
		&i.TimeUtc,
		&i.TimeLocal,
	)
	return i, err
}

const priorObservation = `-- name: PriorObservation :one
SELECT
    id, latitude, longitude, timezone, temp_c, temp_f, relative_humidity, rain, snowfall, weather_code, time_utc, time_local, observation_id, data, size_bytes, time_submitted, foregin
FROM
    observations o
    INNER JOIN observation_drawings od ON o.id = od.observation_id
LIMIT
    1
`

type PriorObservationRow struct {
	ID               int64
	Latitude         float64
	Longitude        float64
	Timezone         string
	TempC            float64
	TempF            float64
	RelativeHumidity float64
	Rain             float64
	Snowfall         float64
	WeatherCode      string
	TimeUtc          time.Time
	TimeLocal        time.Time
	ObservationID    int64
	Data             string
	SizeBytes        int64
	TimeSubmitted    time.Time
	Foregin          interface{}
}

// todo - returns best
func (q *Queries) PriorObservation(ctx context.Context) (PriorObservationRow, error) {
	row := q.db.QueryRowContext(ctx, priorObservation)
	var i PriorObservationRow
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Timezone,
		&i.TempC,
		&i.TempF,
		&i.RelativeHumidity,
		&i.Rain,
		&i.Snowfall,
		&i.WeatherCode,
		&i.TimeUtc,
		&i.TimeLocal,
		&i.ObservationID,
		&i.Data,
		&i.SizeBytes,
		&i.TimeSubmitted,
		&i.Foregin,
	)
	return i, err
}
