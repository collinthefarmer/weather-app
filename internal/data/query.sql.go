// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
	"time"
)

const addGeolocation = `-- name: AddGeolocation :one
INSERT INTO
    geolocations (ip, latitude, longitude)
VALUES
    (?, ?, ?)
RETURNING
    ip, latitude, longitude
`

type AddGeolocationParams struct {
	Ip        string
	Latitude  float64
	Longitude float64
}

func (q *Queries) AddGeolocation(ctx context.Context, arg AddGeolocationParams) (Geolocation, error) {
	row := q.db.QueryRowContext(ctx, addGeolocation, arg.Ip, arg.Latitude, arg.Longitude)
	var i Geolocation
	err := row.Scan(&i.Ip, &i.Latitude, &i.Longitude)
	return i, err
}

const addObservation = `-- name: AddObservation :one
INSERT INTO
    observations (
        time_utc,
        time_local,
        timezone,
        latitude,
        longitude,
        temperature_2m,
        relative_humidity_2m,
        rain,
        showers,
        snowfall,
        drawing_data_uri,
        drawing_size_bytes
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING
    id, time_utc, time_local, timezone, latitude, longitude, temperature_2m, relative_humidity_2m, rain, showers, snowfall, drawing_data_uri, drawing_size_bytes
`

type AddObservationParams struct {
	TimeUtc            time.Time
	TimeLocal          time.Time
	Timezone           string
	Latitude           float64
	Longitude          float64
	Temperature2m      float64
	RelativeHumidity2m float64
	Rain               float64
	Showers            float64
	Snowfall           float64
	DrawingDataUri     sql.NullString
	DrawingSizeBytes   sql.NullInt64
}

func (q *Queries) AddObservation(ctx context.Context, arg AddObservationParams) (Observation, error) {
	row := q.db.QueryRowContext(ctx, addObservation,
		arg.TimeUtc,
		arg.TimeLocal,
		arg.Timezone,
		arg.Latitude,
		arg.Longitude,
		arg.Temperature2m,
		arg.RelativeHumidity2m,
		arg.Rain,
		arg.Showers,
		arg.Snowfall,
		arg.DrawingDataUri,
		arg.DrawingSizeBytes,
	)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.TimeUtc,
		&i.TimeLocal,
		&i.Timezone,
		&i.Latitude,
		&i.Longitude,
		&i.Temperature2m,
		&i.RelativeHumidity2m,
		&i.Rain,
		&i.Showers,
		&i.Snowfall,
		&i.DrawingDataUri,
		&i.DrawingSizeBytes,
	)
	return i, err
}

const addObservationDrawing = `-- name: AddObservationDrawing :exec
UPDATE
    observations
SET
    drawing_data_uri = ?,
    drawing_size_bytes = ?
WHERE
    id = ?
    AND drawing_data_uri IS NULL
`

type AddObservationDrawingParams struct {
	DrawingDataUri   sql.NullString
	DrawingSizeBytes sql.NullInt64
	ID               int64
}

func (q *Queries) AddObservationDrawing(ctx context.Context, arg AddObservationDrawingParams) error {
	_, err := q.db.ExecContext(ctx, addObservationDrawing, arg.DrawingDataUri, arg.DrawingSizeBytes, arg.ID)
	return err
}

const getGeolocation = `-- name: GetGeolocation :one
SELECT
    ip, latitude, longitude
FROM
    geolocations
WHERE
    ip = ?
`

func (q *Queries) GetGeolocation(ctx context.Context, ip string) (Geolocation, error) {
	row := q.db.QueryRowContext(ctx, getGeolocation, ip)
	var i Geolocation
	err := row.Scan(&i.Ip, &i.Latitude, &i.Longitude)
	return i, err
}

const selectRecentObservation = `-- name: SelectRecentObservation :one
SELECT
    id, time_utc, time_local, timezone, latitude, longitude, temperature_2m, relative_humidity_2m, rain, showers, snowfall, drawing_data_uri, drawing_size_bytes
FROM
    observations
LIMIT
    1
`

// todo
func (q *Queries) SelectRecentObservation(ctx context.Context) (Observation, error) {
	row := q.db.QueryRowContext(ctx, selectRecentObservation)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.TimeUtc,
		&i.TimeLocal,
		&i.Timezone,
		&i.Latitude,
		&i.Longitude,
		&i.Temperature2m,
		&i.RelativeHumidity2m,
		&i.Rain,
		&i.Showers,
		&i.Snowfall,
		&i.DrawingDataUri,
		&i.DrawingSizeBytes,
	)
	return i, err
}
